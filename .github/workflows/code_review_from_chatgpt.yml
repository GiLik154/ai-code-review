name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAPI_SECRET_KEY }}
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o
          PROMPT: |
            프로젝트 목표:
            코틀린과 스프링 부트를 사용하여 사이드 프로젝트를 구현합니다. 이 프로젝트는 기술적으로 우수하며, 도메인 주도 설계(DDD), 클린코드 원칙, 레이어드 아키텍처, 그리고 객체지향 프로그래밍(OOP)을 엄격하게 준수합니다.
            요구사항:
            - 기술 스택:
              - 언어: Java
              - 프레임워크: Spring Boot
            - 아키텍처:
              - 레이어드 아키텍처를 기반으로 (예: Presentation, Application, Domain, Infrastructure) 각 계층의 역할 분리를 명확히 할 것
              - DDD 개념(애그리거트, 도메인 서비스, 값 객체, 엔티티 등)을 적극 반영할 것
            - 설계 원칙:
              - 클린코드 원칙(가독성, 유지보수성, 단일 책임 원칙 등)을 준수할 것
              - 객체지향 프로그래밍(OOP)의 캡슐화, 상속, 다형성 등을 고려한 설계
            - 기능 예시:
              - 예를 들어, 사용자 관리(회원가입, 로그인), 상품 관리, 주문 처리 등의 도메인 기능을 포함할 수 있음
            - 추가 요구사항:
              - 각 계층과 클래스의 역할에 대한 주석 및 설명 추가
              - 의존성 주입(DI)와 테스트 가능한 구조(단위 테스트, 통합 테스트 예시)를 고려할 것
            출력 예시:
            - 프로젝트 폴더 구조
            - Domain 계층: 엔티티, 값 객체, 도메인 서비스 클래스 예제
            - Application 계층: 애플리케이션 서비스, 인터페이스, DTO 예제
            - Infrastructure 계층: 리포지토리 인터페이스와 구현체, 데이터베이스 연결 설정
            - Presentation 계층: REST API 컨트롤러 예제
            - 각 계층 및 클래스의 역할과 설계 이유에 대한 설명
            위와 같은 요구사항을 바탕으로 코드를 작성해 주거나, 설계도를 제시해 주세요.
          top_p: 1
          temperature: 0.7
          max_tokens: 1500
          MAX_PATCH_LENGTH: 5000
          IGNORE_PATTERNS: /node_modules/**/*,*.md,*.log,*.txt 
