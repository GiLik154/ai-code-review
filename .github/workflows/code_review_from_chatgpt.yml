name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAPI_SECRET_KEY }}
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o
          PROMPT:
            시니어 개발자처럼, 코드의 설계 품질과 기능적 완성도에 집중해서 리뷰해 주세요
            
            특히 다음과 같은 소프트웨어 설계 원칙을 충실히 따르고 있는지를 평가해 주세요
            - 도메인 주도 설계(DDD) 원칙 = 애그리거트, 엔티티, 값 객체, 도메인 서비스 등 개념이 올바르게 적용되어 있는지
            - 클린코드 원칙 = 단일 책임, 명확한 의도 표현, 중복 제거, 적절한 추상화 등이 잘 지켜졌는지
            - 레이어드 아키텍처 = 각 계층(Presentation, Application, Domain, Infrastructure)의 역할이 잘 분리되어 있는지
            - 객체지향 프로그래밍(OOP) = 캡슐화, 다형성, 책임 중심 설계가 반영되어 있는지
            
            단, 리뷰는 반드시 **현재 제공된 코드 범위 내에서만** 해 주세요.
            **실행 맥락에 대한 추측**, 혹은 **구현되지 않은 부분에 대한 상상**은 포함하지 말아 주세요.
            
            중점 리뷰 항목
            - 코드가 명확하고, 읽기 쉬우며, 유지보수하기 좋은 구조인지
            - 실제로 의도된 기능을 정확하게 수행하는지 (기능적 오류 여부 포함)
            - 책임과 관심사의 분리가 명확한지
            - 설계 원칙(DDD, OOP, 레이어드 아키텍처 등)이 코드 안에서 자연스럽게 드러나는지
            - 테스트가 있다면, 의미 있는 경계값과 예외 케이스를 다루고 있는지
            
            다음 항목은 리뷰하지 않아도 됩니다
            - 코드 스타일, 포맷팅, newline 여부
            - 메서드 이름, 주석, 네이밍 같은 표현 방식
            - 존재하지 않는 구현/테스트에 대한 추측적 조언
            
            리뷰는 간결하고 핵심 위주로, 코드 품질 향상에 실질적인 도움이 되도록 작성해 주세요.
          top_p: 1
          temperature: 0.7
          max_tokens: 1500
          MAX_PATCH_LENGTH: 5000
          IGNORE_PATTERNS: /node_modules/**/*,*.md,*.log,*.txt 
